// <auto-generated>
// Code generated by LUISGen D:\enlistments\AI\solutions\Virtual-Assistant\src\csharp\assistant\DeploymentScripts\..\LocaleConfigurations\..\DeploymentScripts\zh\email.luis -cs Luis.EmailLU -o D:\enlistments\AI\solutions\Virtual-Assistant\src\csharp\assistant\DeploymentScripts\..\LocaleConfigurations\..\..\skills\emailskill\emailskill\CognitiveModels\LUIS\zh\email.lu\..\..\..\..\Dialogs\Shared\Resources
// Tool github: https://github.com/microsoft/botbuilder-tools
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
using Newtonsoft.Json;
using System.Collections.Generic;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.AI.Luis;
namespace Luis
{
    public class EmailLU: IRecognizerConvert
    {
        public string Text;
        public string AlteredText;
        public enum Intent {
            AddFlag, 
            AddMore, 
            CancelMessages, 
            CheckMessages, 
            ConfirmMessages, 
            Delete, 
            Forward, 
            None, 
            QueryLastText, 
            ReadAloud, 
            Reply, 
            SearchMessages, 
            SendEmail, 
            ShowNext, 
            ShowPrevious
        };
        public Dictionary<Intent, IntentScore> Intents;

        public class _Entities
        {
            // Simple entities
            public string[] SenderName;
            public string[] ContactName;
            public string[] FromRelationshipName;
            public string[] OrderReference;
            public string[] Category;
            public string[] Message;
            public string[] Attachment;
            public string[] EmailSubject;
            public string[] RelationshipName;
            public string[] EmailAddress;
            public string[] Time;
            public string[] SearchTexts;
            public string[] Line;
            public string[] PositionReference;
            public string[] Date;
            public string[] EmailPlatform;

            // Built-in entities
            public double[] number;
            public double[] ordinal;

            // Instance
            public class _Instance
            {
                public InstanceData[] SenderName;
                public InstanceData[] ContactName;
                public InstanceData[] FromRelationshipName;
                public InstanceData[] OrderReference;
                public InstanceData[] Category;
                public InstanceData[] Message;
                public InstanceData[] Attachment;
                public InstanceData[] EmailSubject;
                public InstanceData[] RelationshipName;
                public InstanceData[] EmailAddress;
                public InstanceData[] Time;
                public InstanceData[] SearchTexts;
                public InstanceData[] Line;
                public InstanceData[] PositionReference;
                public InstanceData[] Date;
                public InstanceData[] EmailPlatform;
                public InstanceData[] number;
                public InstanceData[] ordinal;
            }
            [JsonProperty("$instance")]
            public _Instance _instance;
        }
        public _Entities Entities;

        [JsonExtensionData(ReadData = true, WriteData = true)]
        public IDictionary<string, object> Properties {get; set; }

        public void Convert(dynamic result)
        {
            var app = JsonConvert.DeserializeObject<EmailLU>(JsonConvert.SerializeObject(result));
            Text = app.Text;
            AlteredText = app.AlteredText;
            Intents = app.Intents;
            Entities = app.Entities;
            Properties = app.Properties;
        }

        public (Intent intent, double score) TopIntent()
        {
            Intent maxIntent = Intent.None;
            var max = 0.0;
            foreach (var entry in Intents)
            {
                if (entry.Value.Score > max)
                {
                    maxIntent = entry.Key;
                    max = entry.Value.Score.Value;
                }
            }
            return (maxIntent, max);
        }
    }
}
